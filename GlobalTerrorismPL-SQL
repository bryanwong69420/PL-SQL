SET SERVEROUTPUT ON SIZE 4000

DECLARE
    CURSOR c_external_table IS
        SELECT EVENTID,IYEAR,IMONTH,IDAY,APPROXDATE,EXTENDED,RESOLUTION,COUNTRY,COUNTRY_TXT,REGION,REGION_TXT,PROVSTATE,CITY,LATITUDE,LONGITUDE,SPECIFICITY,VICINITY,LOCATION,SUMMARY,CRIT1,CRIT2,CRIT3,DOUBTTERR,ALTERNATIVE,ALTERNATIVE_TXT,MULTIPLE,SUCCESS,SUICIDE,ATTACKTYPE1,ATTACKTYPE1_TXT,ATTACKTYPE2,ATTACKTYPE2_TXT,ATTACKTYPE3,ATTACKTYPE3_TXT,TARGTYPE1,TARGTYPE1_TXT,TARGSUBTYPE1,TARGSUBTYPE1_TXT,CORP1,TARGET1,NATLTY1,NATLTY1_TXT,TARGTYPE2,TARGTYPE2_TXT,TARGSUBTYPE2,TARGSUBTYPE2_TXT,CORP2,TARGET2,NATLTY2,NATLTY2_TXT,TARGTYPE3,TARGTYPE3_TXT,TARGSUBTYPE3,TARGSUBTYPE3_TXT,CORP3,TARGET3,NATLTY3,NATLTY3_TXT,GNAME,GSUBNAME,GNAME2,GSUBNAME2,GNAME3,GSUBNAME3,MOTIVE,GUNCERTAIN1,GUNCERTAIN2,GUNCERTAIN3,INDIVIDUAL,NPERPS,NPERPCAP,CLAIMED,CLAIMMODE,CLAIMMODE_TXT,CLAIM2,CLAIMMODE2,CLAIMMODE2_TXT,CLAIM3,CLAIMMODE3,CLAIMMODE3_TXT,COMPCLAIM,WEAPTYPE1,WEAPTYPE1_TXT,WEAPSUBTYPE1,WEAPSUBTYPE1_TXT,WEAPTYPE2,WEAPTYPE2_TXT,WEAPSUBTYPE2,WEAPSUBTYPE2_TXT,WEAPTYPE3,WEAPTYPE3_TXT,WEAPSUBTYPE3,WEAPSUBTYPE3_TXT,WEAPTYPE4,WEAPTYPE4_TXT,WEAPSUBTYPE4,WEAPSUBTYPE4_TXT,WEAPDETAIL,NKILL,NKILLUS,NKILLTER,NWOUND,NWOUNDUS,NWOUNDTE,PROPERTY,PROPEXTENT,PROPEXTENT_TXT,PROPVALUE,PROPCOMMENT,ISHOSTKID,NHOSTKID,NHOSTKIDUS,NHOURS,NDAYS,DIVERT,KIDHIJCOUNTRY,RANSOM,RANSOMAMT,RANSOMAMTUS,RANSOMPAID,RANSOMPAIDUS,RANSOMNOTE,HOSTKIDOUTCOME,HOSTKIDOUTCOME_TXT,NRELEASED,ADDNOTES,SCITE1,SCITE2,SCITE3,DBSOURCE,INT_LOG,INT_IDEO,INT_MISC,INT_ANY,RELATED
        FROM GLOBALTERRORISM;
    file_handle  UTL_FILE.FILE_TYPE;
    file_line VARCHAR2(4000);
    file_path VARCHAR2(100):= '&file_path';
    file_name VARCHAR2(20):= '&file_name';
    t_directory_object_name VARCHAR2(30) := 'USER_DIR';
    t_EVENTID	NUMBER(38,0);
    t_IYEAR	NUMBER(38,0);
    t_IMONTH	NUMBER(38,0);
    t_IDAY	NUMBER(38,0);
    t_APPROXDATE	VARCHAR2(26 BYTE);
    t_EXTENDED	NUMBER(38,0);
    t_RESOLUTION	VARCHAR2(26 BYTE);
    t_COUNTRY	NUMBER(38,0);
    t_COUNTRY_TXT	VARCHAR2(30 BYTE);
    t_REGION	NUMBER(38,0);
    t_REGION_TXT	VARCHAR2(128 BYTE);
    t_PROVSTATE	VARCHAR2(26 BYTE);
    t_CITY	VARCHAR2(26 BYTE);
    t_LATITUDE	NUMBER(38,6);
    t_LONGITUDE	NUMBER(38,6);
    t_SPECIFICITY	NUMBER(38,0);
    t_VICINITY	NUMBER(38,0);
    t_LOCATION	VARCHAR2(128 BYTE);
    t_SUMMARY	VARCHAR2(1024 BYTE);
    t_CRIT1	NUMBER(38,0);
    t_CRIT2	NUMBER(38,0);
    t_CRIT3	NUMBER(38,0);
    t_DOUBTTERR	NUMBER(38,0);
    t_ALTERNATIVE	NUMBER(38,0);
    t_ALTERNATIVE_TXT	VARCHAR2(128 BYTE);
    t_MULTIPLE	NUMBER(38,0);
    t_SUCCESS	NUMBER(38,0);
    t_SUICIDE	NUMBER(38,0);
    t_ATTACKTYPE1	NUMBER(38,0);
    t_ATTACKTYPE1_TXT	VARCHAR2(128 BYTE);
    t_ATTACKTYPE2	NUMBER(38,0);
    t_ATTACKTYPE2_TXT	VARCHAR2(26 BYTE);
    t_ATTACKTYPE3	VARCHAR2(26 BYTE);
    t_ATTACKTYPE3_TXT	VARCHAR2(26 BYTE);
    t_TARGTYPE1	NUMBER(38,0);
    t_TARGTYPE1_TXT	VARCHAR2(128 BYTE);
    t_TARGSUBTYPE1	NUMBER(38,0);
    t_TARGSUBTYPE1_TXT	VARCHAR2(128 BYTE);
    t_CORP1	VARCHAR2(128 BYTE);
    t_TARGET1	VARCHAR2(128 BYTE);
    t_NATLTY1	NUMBER(38,0);
    t_NATLTY1_TXT	VARCHAR2(26 BYTE);
    t_TARGTYPE2	VARCHAR2(26 BYTE);
    t_TARGTYPE2_TXT	VARCHAR2(26 BYTE);
    t_TARGSUBTYPE2	VARCHAR2(26 BYTE);
    t_TARGSUBTYPE2_TXT	VARCHAR2(26 BYTE);
    t_CORP2	VARCHAR2(26 BYTE);
    t_TARGET2	VARCHAR2(26 BYTE);
    t_NATLTY2	VARCHAR2(26 BYTE);
    t_NATLTY2_TXT	VARCHAR2(26 BYTE);
    t_TARGTYPE3	VARCHAR2(26 BYTE);
    t_TARGTYPE3_TXT	VARCHAR2(26 BYTE);
    t_TARGSUBTYPE3	VARCHAR2(26 BYTE);
    t_TARGSUBTYPE3_TXT	VARCHAR2(26 BYTE);
    t_CORP3	VARCHAR2(26 BYTE);
    t_TARGET3	VARCHAR2(26 BYTE);
    t_NATLTY3	VARCHAR2(26 BYTE);
    t_NATLTY3_TXT	VARCHAR2(26 BYTE);
    t_GNAME	VARCHAR2(128 BYTE);
    t_GSUBNAME	VARCHAR2(26 BYTE);
    t_GNAME2	VARCHAR2(26 BYTE);
    t_GSUBNAME2	VARCHAR2(26 BYTE);
    t_GNAME3	VARCHAR2(26 BYTE);
    t_GSUBNAME3	VARCHAR2(26 BYTE);
    t_MOTIVE	VARCHAR2(256 BYTE);
    t_GUNCERTAIN1	NUMBER(38,0);
    t_GUNCERTAIN2	VARCHAR2(26 BYTE);
    t_GUNCERTAIN3	VARCHAR2(26 BYTE);
    t_INDIVIDUAL	NUMBER(38,0);
    t_NPERPS	NUMBER(38,0);
    t_NPERPCAP	NUMBER(38,0);
    t_CLAIMED	NUMBER(38,0);
    t_CLAIMMODE	NUMBER(38,0);
    t_CLAIMMODE_TXT	VARCHAR2(26 BYTE);
    t_CLAIM2	VARCHAR2(26 BYTE);
    t_CLAIMMODE2	VARCHAR2(26 BYTE);
    t_CLAIMMODE2_TXT	VARCHAR2(26 BYTE);
    t_CLAIM3	VARCHAR2(26 BYTE);
    t_CLAIMMODE3	VARCHAR2(26 BYTE);
    t_CLAIMMODE3_TXT	VARCHAR2(26 BYTE);
    t_COMPCLAIM	VARCHAR2(26 BYTE);
    t_WEAPTYPE1	NUMBER(38,0);
    t_WEAPTYPE1_TXT	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE1	NUMBER(38,0);
    t_WEAPSUBTYPE1_TXT	VARCHAR2(128 BYTE);
    t_WEAPTYPE2	NUMBER(38,0);
    t_WEAPTYPE2_TXT	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE2	NUMBER(38,0);
    t_WEAPSUBTYPE2_TXT	VARCHAR2(26 BYTE);
    t_WEAPTYPE3	VARCHAR2(26 BYTE);
    t_WEAPTYPE3_TXT	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE3	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE3_TXT	VARCHAR2(26 BYTE);
    t_WEAPTYPE4	VARCHAR2(26 BYTE);
    t_WEAPTYPE4_TXT	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE4	VARCHAR2(26 BYTE);
    t_WEAPSUBTYPE4_TXT	VARCHAR2(26 BYTE);
    t_WEAPDETAIL	VARCHAR2(256 BYTE);
    t_NKILL	NUMBER(38,0);
    t_NKILLUS	NUMBER(38,0);
    t_NKILLTER	NUMBER(38,0);
    t_NWOUND	NUMBER(38,0);
    t_NWOUNDUS	NUMBER(38,0);
    t_NWOUNDTE	NUMBER(38,0);
    t_PROPERTY	NUMBER(38,0);
    t_PROPEXTENT	NUMBER(38,0);
    t_PROPEXTENT_TXT	VARCHAR2(128 BYTE);
    t_PROPVALUE	NUMBER(38,0);
    t_PROPCOMMENT	VARCHAR2(256 BYTE);
    t_ISHOSTKID	NUMBER(38,0);
    t_NHOSTKID	NUMBER(38,0);
    t_NHOSTKIDUS	NUMBER(38,0);
    t_NHOURS	VARCHAR2(26 BYTE);
    t_NDAYS	VARCHAR2(26 BYTE);
    t_DIVERT	VARCHAR2(26 BYTE);
    t_KIDHIJCOUNTRY	VARCHAR2(26 BYTE);
    t_RANSOM	NUMBER(38,0);
    t_RANSOMAMT	NUMBER(38,0);
    t_RANSOMAMTUS	VARCHAR2(26 BYTE);
    t_RANSOMPAID	NUMBER(38,0);
    t_RANSOMPAIDUS	VARCHAR2(26 BYTE);
    t_RANSOMNOTE	VARCHAR2(26 BYTE);
    t_HOSTKIDOUTCOME	NUMBER(38,0);
    t_HOSTKIDOUTCOME_TXT	VARCHAR2(128 BYTE);
    t_NRELEASED	NUMBER(38,0);
    t_ADDNOTES	VARCHAR2(1024 BYTE);
    t_SCITE1	VARCHAR2(1024 BYTE);
    t_SCITE2	VARCHAR2(1024 BYTE);
    t_SCITE3	VARCHAR2(1024 BYTE);
    t_DBSOURCE	VARCHAR2(26 BYTE);
    t_INT_LOG	NUMBER(38,0);
    t_INT_IDEO	NUMBER(38,0);
    t_INT_MISC	NUMBER(38,0);
    t_INT_ANY	NUMBER(38,0);
    t_RELATED	VARCHAR2(128 BYTE);
    -- Custom exception for file not found
    ex_file_not_found EXCEPTION;
    PRAGMA EXCEPTION_INIT(ex_file_not_found, -29283);
 
    -- Custom exception for invalid data
    ex_invalid_data EXCEPTION;
BEGIN
    EXECUTE IMMEDIATE 'CREATE OR REPLACE DIRECTORY ' || t_directory_object_name || ' AS ''' || file_path || '''';
    -- Attempt to open the file in read mode
    BEGIN
        file_handle := UTL_FILE.FOPEN(t_directory_object_name, file_name, 'R');
    EXCEPTION
        WHEN UTL_FILE.INVALID_PATH THEN
            RAISE ex_file_not_found;
    END;
    -- Open the cursor and loop through each row in the external table
    OPEN c_external_table;
    LOOP
        FETCH c_external_table INTO t_EVENTID,t_IYEAR,t_IMONTH,t_IDAY,t_APPROXDATE,t_EXTENDED,t_RESOLUTION,t_COUNTRY,t_COUNTRY_TXT,t_REGION,t_REGION_TXT,t_PROVSTATE,t_CITY,t_LATITUDE,t_LONGITUDE,t_SPECIFICITY,t_VICINITY,t_LOCATION,t_SUMMARY,t_CRIT1,t_CRIT2, t_CRIT3,t_DOUBTTERR,t_ALTERNATIVE, t_ALTERNATIVE_TXT,t_MULTIPLE,t_SUCCESS,t_SUICIDE,t_ATTACKTYPE1,t_ATTACKTYPE1_TXT,t_ATTACKTYPE2,t_ATTACKTYPE2_TXT,t_ATTACKTYPE3,t_ATTACKTYPE3_TXT,t_TARGTYPE1,t_TARGTYPE1_TXT,t_TARGSUBTYPE1,t_TARGSUBTYPE1_TXT,t_CORP1,t_TARGET1,t_NATLTY1,t_NATLTY1_TXT,t_TARGTYPE2,t_TARGTYPE2_TXT,t_TARGSUBTYPE2,t_TARGSUBTYPE2_TXT,t_CORP2,t_TARGET2,t_NATLTY2,t_NATLTY2_TXT,t_TARGTYPE3,t_TARGTYPE3_TXT,t_TARGSUBTYPE3,t_TARGSUBTYPE3_TXT,t_CORP3,t_TARGET3,t_NATLTY3,t_NATLTY3_TXT,t_GNAME,t_GSUBNAME,t_GNAME2,t_GSUBNAME2,t_GNAME3,t_GSUBNAME3,t_MOTIVE,t_GUNCERTAIN1,t_GUNCERTAIN2,t_GUNCERTAIN3,t_INDIVIDUAL,t_NPERPS,t_NPERPCAP,t_CLAIMED,t_CLAIMMODE,t_CLAIMMODE_TXT,t_CLAIM2,t_CLAIMMODE2,t_CLAIMMODE2_TXT,t_CLAIM3,t_CLAIMMODE3,t_CLAIMMODE3_TXT,t_COMPCLAIM,t_WEAPTYPE1,t_WEAPTYPE1_TXT,t_WEAPSUBTYPE1,t_WEAPSUBTYPE1_TXT,t_WEAPTYPE2,t_WEAPTYPE2_TXT,t_WEAPSUBTYPE2,t_WEAPSUBTYPE2_TXT,t_WEAPTYPE3,t_WEAPTYPE3_TXT,t_WEAPSUBTYPE3,t_WEAPSUBTYPE3_TXT,t_WEAPTYPE4,t_WEAPTYPE4_TXT,t_WEAPSUBTYPE4,t_WEAPSUBTYPE4_TXT,t_WEAPDETAIL,t_NKILL,t_NKILLUS,t_NKILLTER,t_NWOUND,t_NWOUNDUS,t_NWOUNDTE,t_PROPERTY,t_PROPEXTENT,t_PROPEXTENT_TXT,t_PROPVALUE,t_PROPCOMMENT,t_ISHOSTKID,t_NHOSTKID,t_NHOSTKIDUS,t_NHOURS,t_NDAYS,t_DIVERT,t_KIDHIJCOUNTRY,t_RANSOM,t_RANSOMAMT,t_RANSOMAMTUS,t_RANSOMPAID,t_RANSOMPAIDUS,t_RANSOMNOTE,t_HOSTKIDOUTCOME,t_HOSTKIDOUTCOME_TXT,t_NRELEASED,t_ADDNOTES,t_SCITE1,t_SCITE2,t_SCITE3,t_DBSOURCE,t_INT_LOG,t_INT_IDEO,t_INT_MISC,t_INT_ANY,t_RELATED;
        EXIT WHEN c_external_table%NOTFOUND;
    -- Insert into the table
        BEGIN
            INSERT INTO GLOBALTERRORISM(EVENTID,IYEAR,IMONTH,IDAY,APPROXDATE,EXTENDED,RESOLUTION,COUNTRY,COUNTRY_TXT,REGION,REGION_TXT,PROVSTATE,CITY,LATITUDE,LONGITUDE,SPECIFICITY,VICINITY,LOCATION,SUMMARY,CRIT1,CRIT2,CRIT3,DOUBTTERR,ALTERNATIVE,ALTERNATIVE_TXT,MULTIPLE,SUCCESS,SUICIDE,ATTACKTYPE1,ATTACKTYPE1_TXT,ATTACKTYPE2,ATTACKTYPE2_TXT,ATTACKTYPE3,ATTACKTYPE3_TXT,TARGTYPE1,TARGTYPE1_TXT,TARGSUBTYPE1,TARGSUBTYPE1_TXT,CORP1,TARGET1,NATLTY1,NATLTY1_TXT,TARGTYPE2,TARGTYPE2_TXT,TARGSUBTYPE2,TARGSUBTYPE2_TXT,CORP2,TARGET2,NATLTY2,NATLTY2_TXT,TARGTYPE3,TARGTYPE3_TXT,TARGSUBTYPE3,TARGSUBTYPE3_TXT,CORP3,TARGET3,NATLTY3,NATLTY3_TXT,GNAME,GSUBNAME,GNAME2,GSUBNAME2,GNAME3,GSUBNAME3,MOTIVE,GUNCERTAIN1,GUNCERTAIN2,GUNCERTAIN3,INDIVIDUAL,NPERPS,NPERPCAP,CLAIMED,CLAIMMODE,CLAIMMODE_TXT,CLAIM2,CLAIMMODE2,CLAIMMODE2_TXT,CLAIM3,CLAIMMODE3,CLAIMMODE3_TXT,COMPCLAIM,WEAPTYPE1,WEAPTYPE1_TXT,WEAPSUBTYPE1,WEAPSUBTYPE1_TXT,WEAPTYPE2,WEAPTYPE2_TXT,WEAPSUBTYPE2,WEAPSUBTYPE2_TXT,WEAPTYPE3,WEAPTYPE3_TXT,WEAPSUBTYPE3,WEAPSUBTYPE3_TXT,WEAPTYPE4,WEAPTYPE4_TXT,WEAPSUBTYPE4,WEAPSUBTYPE4_TXT,WEAPDETAIL,NKILL,NKILLUS,NKILLTER,NWOUND,NWOUNDUS,NWOUNDTE,PROPERTY,PROPEXTENT,PROPEXTENT_TXT,PROPVALUE,PROPCOMMENT,ISHOSTKID,NHOSTKID,NHOSTKIDUS,NHOURS,NDAYS,DIVERT,KIDHIJCOUNTRY,RANSOM,RANSOMAMT,RANSOMAMTUS,RANSOMPAID,RANSOMPAIDUS,RANSOMNOTE,HOSTKIDOUTCOME,HOSTKIDOUTCOME_TXT,NRELEASED,ADDNOTES,SCITE1,SCITE2,SCITE3,DBSOURCE,INT_LOG,INT_IDEO,INT_MISC,INT_ANY,RELATED)
            VALUES(t_EVENTID,t_IYEAR,t_IMONTH,t_IDAY,t_APPROXDATE,t_EXTENDED,t_RESOLUTION,t_COUNTRY,t_COUNTRY_TXT,t_REGION,t_REGION_TXT,t_PROVSTATE,t_CITY,t_LATITUDE,t_LONGITUDE,t_SPECIFICITY,t_VICINITY,t_LOCATION,t_SUMMARY,t_CRIT1,t_CRIT2, t_CRIT3,t_DOUBTTERR,t_ALTERNATIVE, t_ALTERNATIVE_TXT,t_MULTIPLE,t_SUCCESS,t_SUICIDE,t_ATTACKTYPE1,t_ATTACKTYPE1_TXT,t_ATTACKTYPE2,t_ATTACKTYPE2_TXT,t_ATTACKTYPE3,t_ATTACKTYPE3_TXT,t_TARGTYPE1,t_TARGTYPE1_TXT,t_TARGSUBTYPE1,t_TARGSUBTYPE1_TXT,t_CORP1,t_TARGET1,t_NATLTY1,t_NATLTY1_TXT,t_TARGTYPE2,t_TARGTYPE2_TXT,t_TARGSUBTYPE2,t_TARGSUBTYPE2_TXT,t_CORP2,t_TARGET2,t_NATLTY2,t_NATLTY2_TXT,t_TARGTYPE3,t_TARGTYPE3_TXT,t_TARGSUBTYPE3,t_TARGSUBTYPE3_TXT,t_CORP3,t_TARGET3,t_NATLTY3,t_NATLTY3_TXT,t_GNAME,t_GSUBNAME,t_GNAME2,t_GSUBNAME2,t_GNAME3,t_GSUBNAME3,t_MOTIVE,t_GUNCERTAIN1,t_GUNCERTAIN2,t_GUNCERTAIN3,t_INDIVIDUAL,t_NPERPS,t_NPERPCAP,t_CLAIMED,t_CLAIMMODE,t_CLAIMMODE_TXT,t_CLAIM2,t_CLAIMMODE2,t_CLAIMMODE2_TXT,t_CLAIM3,t_CLAIMMODE3,t_CLAIMMODE3_TXT,t_COMPCLAIM,t_WEAPTYPE1,t_WEAPTYPE1_TXT,t_WEAPSUBTYPE1,t_WEAPSUBTYPE1_TXT,t_WEAPTYPE2,t_WEAPTYPE2_TXT,t_WEAPSUBTYPE2,t_WEAPSUBTYPE2_TXT,t_WEAPTYPE3,t_WEAPTYPE3_TXT,t_WEAPSUBTYPE3,t_WEAPSUBTYPE3_TXT,t_WEAPTYPE4,t_WEAPTYPE4_TXT,t_WEAPSUBTYPE4,t_WEAPSUBTYPE4_TXT,t_WEAPDETAIL,t_NKILL,t_NKILLUS,t_NKILLTER,t_NWOUND,t_NWOUNDUS,t_NWOUNDTE,t_PROPERTY,t_PROPEXTENT,t_PROPEXTENT_TXT,t_PROPVALUE,t_PROPCOMMENT,t_ISHOSTKID,t_NHOSTKID,t_NHOSTKIDUS,t_NHOURS,t_NDAYS,t_DIVERT,t_KIDHIJCOUNTRY,t_RANSOM,t_RANSOMAMT,t_RANSOMAMTUS,t_RANSOMPAID,t_RANSOMPAIDUS,t_RANSOMNOTE,t_HOSTKIDOUTCOME,t_HOSTKIDOUTCOME_TXT,t_NRELEASED,t_ADDNOTES,t_SCITE1,t_SCITE2,t_SCITE3,t_DBSOURCE,t_INT_LOG,t_INT_IDEO,t_INT_MISC,t_INT_ANY,t_RELATED);
        EXCEPTION
            WHEN OTHERS THEN
                RAISE ex_invalid_data;
        END;
    END LOOP;
    CLOSE c_external_table;
    DBMS_OUTPUT.PUT_LINE('File processed successfully.');        
 
    -- Always close the file if it was successfully opened
    UTL_FILE.FCLOSE(file_handle);
    EXCEPTION
    WHEN ex_invalid_data THEN
        DBMS_OUTPUT.PUT_LINE('Invalid data in file.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An unexpected error occurred: ' || SQLERRM);
END;
/
-- Create BEFORE INSERT Trigger
CREATE OR REPLACE TRIGGER before_insert_globalterrorism
BEFORE INSERT ON GLOBALTERRORISM
FOR EACH ROW
DECLARE
    v_count NUMBER;  -- Variable to store the count of events on the same day
BEGIN
    -- Validate data before insertion
    IF :NEW.IYEAR < 1970 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Year cannot be before 1970.');
    END IF;
    IF :NEW.IMONTH > 12 OR :NEW.IMONTH < 0 THEN 
        RAISE_APPLICATION_ERROR(-20002, 'Month cannot be more than 12 or less than 1');
    END IF;
    
    -- Validate day of the month
    IF :NEW.IMONTH IN (1, 3, 5, 7, 8, 10, 12) THEN -- Months with 31 days
        IF :NEW.IDAY < 1 OR :NEW.IDAY > 31 THEN
                RAISE_APPLICATION_ERROR(-20003, 'Day must be between 1 and 31 for the given month.');
        END IF;
    END IF;
        
    IF :NEW.IMONTH IN (4, 6, 9, 11) THEN -- Months with 30 days
        IF :NEW.IDAY < 1 OR :NEW.IDAY > 30 THEN
                RAISE_APPLICATION_ERROR(-20004, 'Day must be between 1 and 30 for the given month.');
        END IF;
    END IF;
        
        IF :NEW.IMONTH = 2 THEN -- February, handle leap year
            IF (:NEW.IYEAR MOD 4 = 0 AND :NEW.IYEAR MOD 100 <> 0) OR (:NEW.IYEAR MOD 400 = 0) THEN
                IF :NEW.IDAY < 1 OR :NEW.IDAY > 29 THEN
                    RAISE_APPLICATION_ERROR(-20005, 'Day must be between 1 and 29 for February in a leap year.');
                END IF;
            ELSE
                IF :NEW.IDAY < 1 OR :NEW.IDAY > 28 THEN
                    RAISE_APPLICATION_ERROR(-20006, 'Day (IDAY) must be between 1 and 28 for February in a non-leap year.');
                END IF;
            END IF;
        END IF;
    
    -- Validate APPROXDATE format "Month Day-Day, Year"
    IF :NEW.APPROXDATE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.APPROXDATE, '^[[:alpha:]]+ [0-9]{1,2}-[0-9]{1,2}, [0-9]{4}$') THEN
            RAISE_APPLICATION_ERROR(-20007, 'APPROXDATE must be in the format "Month Day-Day, Year".');
        END IF;
    END IF;
    
    
    -- Validate EXTENDED to accept only 0 and 1
    IF :NEW.EXTENDED NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20008, 'EXTENDED must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate RESOLUTION format "Day/Month/Year"
    IF :NEW.RESOLUTION IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RESOLUTION, '^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$') THEN
            RAISE_APPLICATION_ERROR(-20009, 'Date must be in the format Day/Month/Year (e.g., 3/15/2016).');
        END IF;
    END IF;
    
    -- Validate COUNTRY format "Numbers Only"
    IF :NEW.COUNTRY IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.COUNTRY, '^[0-9]+$') OR LENGTH(:NEW.COUNTRY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20010, 'COUNTRY must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate COUNTRY_TXT existence if COUNTRY is not empty
    IF :NEW.COUNTRY IS NOT NULL AND :NEW.COUNTRY_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20011, 'COUNTRY_TXT must be provided when COUNTRY is not null.');
    END IF;
    
    
    -- Validate REGION format "Numbers Only"    
    IF :NEW.REGION IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.REGION, '^[0-9]+$') OR LENGTH(:NEW.REGION) > 38 THEN
            RAISE_APPLICATION_ERROR(-20012, 'REGION must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate REGION_TXT existence if REGION is not empty
    IF :NEW.REGION IS NOT NULL AND :NEW.REGION_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20013, 'REGION_TXT must be provided when REGION is not null.');
    END IF;
    
    --Validate PROVSTATE existence if PROVSTATE is not empty
    IF :NEW.PROVSTATE IS NOT NULL THEN
        IF LENGTH(:NEW.PROVSTATE) > 26 THEN
            RAISE_APPLICATION_ERROR(-20014, 'PROVSTATE must be a string of 26 bytes or less.');
        END IF;
    END IF;
    
    --Validate CITY existence if CITY is not empty
    IF :NEW.CITY IS NOT NULL THEN
        IF LENGTH(:NEW.CITY) > 26 THEN
            RAISE_APPLICATION_ERROR(-20015, 'PROVSTATE must be a string of 26 bytes or less.');
        END IF;
    END IF;
    
    -- Check if LATITUDE is either NULL (empty) or a valid number with precision NUMBER(38,6)
    IF :NEW.LATITUDE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.LATITUDE, '^-?\d{1,32}(\.\d{0,6})?$') THEN
            RAISE_APPLICATION_ERROR(-20016, 'LATITUDE must be a valid number with up to 38 digits and 6 decimal places.');
        END IF;
    END IF;
    
    -- Check if LONGITUDE is either NULL (empty) or a valid number with precision NUMBER(38,6)
    IF :NEW.LONGITUDE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.LONGITUDE, '^-?\d{1,32}(\.\d{0,6})?$') THEN
            RAISE_APPLICATION_ERROR(-20017, 'LONGITUDE must be a valid number with up to 38 digits and 6 decimal places.');
        END IF;
    END IF;    
    
    -- Validate SPECIFICITY to accept only numeric value
    IF :NEW.SPECIFICITY IS NOT NULL THEN
        IF REGEXP_LIKE(:NEW.SPECIFICITY, '^[0-9]+$') OR LENGTH(:NEW.SPECIFICITY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20018, 'SPECIFICITY must be a valid number with up to 38 digits.');
        END IF;    
    END IF;
    
    -- Validate VICINITY to accept only 0 and 1
    IF :NEW.VICINITY NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20019, 'VICINITY must be either 0 or 1 for No and Yes.');
    END IF;
    
    --Validate LOCATION to be not more than 128 character BYTE
    IF :NEW.LOCATION IS NOT NULL THEN
        IF LENGTHB(:NEW.LOCATION) > 128 THEN
            RAISE_APPLICATION_ERROR(-20020, 'CORP3 must be a string with a maximum length of 128 bytes.');
        END IF;
    END IF;
    
    --Validate SUMMARY to be not more than 1024 character BYTE
    IF :NEW.SUMMARY IS NOT NULL THEN
        IF LENGTHB(:NEW.SUMMARY) > 1024 THEN
            RAISE_APPLICATION_ERROR(-20021, 'SUMMARY must be a string with a maximum length of 1024 bytes.');
        END IF;
    END IF;
    
    -- Validate CRIT1 to accept only 0 and 1
    IF :NEW.CRIT1 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20022, 'CRIT1 must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate CRIT2 to accept only 0 and 1
    IF :NEW.CRIT2 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20023, 'CRIT2 must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate CRIT3 to accept only 0 and 1
    IF :NEW.CRIT3 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20024, 'CRIT3 must be either 0 or 1 for No and Yes.');
    END IF;
    
    --Validate DOUBTTERR to accept numeric value
    IF REGEXP_LIKE(:NEW.DOUBTTERR, '^[0-9]+$') OR LENGTH(:NEW.DOUBTTERR) > 38 THEN
        RAISE_APPLICATION_ERROR(-20025, 'DOUBTTERR must be a valid number with up to 38 digits.');
    END IF;
    
    -- Validate ALTERNATIVE format "Numbers Only"    
    IF :NEW.ALTERNATIVE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ALTERNATIVE, '^[0-9]+$') OR LENGTH(:NEW.ALTERNATIVE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20026, 'ALTERNATIVE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ALTERNATIVE_TXT existence if ALTERNATIVE is not empty
    IF :NEW.ALTERNATIVE IS NOT NULL AND :NEW.ALTERNATIVE_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20027, 'ALTERNATIVE_TXT must be provided when ALTERNATIVE is not null.');
        IF LENGTHB(:NEW.ALTERNATIVE_TXT) > 128 THEN 
            RAISE_APPLICATION_ERROR(-20028, 'ALTERNATIVE_TXT must be provided when REGION is not null or .');
        END IF;
    END IF;
    
    -- Validate MULTIPLE to accept only 0 and 1
    IF :NEW.MULTIPLE NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20029, 'MULTIPLE must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate SUCCESS to accept only 0 and 1
    IF :NEW.SUCCESS NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20030, 'SUCCESS must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate SUICIDE to accept only 0 and 1
    IF :NEW.SUICIDE NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20031, 'SUICIDE must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate ATTACKTYPE1 format "Numbers Only"
    IF :NEW.ATTACKTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE1, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20032, 'ATTACKTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE1_TXT existence if ATTACKTYPE1 is not empty
    IF :NEW.ATTACKTYPE1 IS NOT NULL AND :NEW.ATTACKTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20033, 'ATTACKTYPE1_TXT must be provided when ATTACKTYPE1 is not null.');
    END IF;
    
    -- Validate ATTACKTYPE2 format "Numbers Only"
    IF :NEW.ATTACKTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE2, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20034, 'ATTACKTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE2_TXT existence if ATTACKTYPE2 is not empty
    IF :NEW.ATTACKTYPE2 IS NOT NULL AND :NEW.ATTACKTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20035, 'ATTACKTYPE2_TXT must be provided when ATTACKTYPE2 is not null.');
    END IF;
    
    -- Validate ATTACKTYPE3 format "Numbers Only"
    IF :NEW.ATTACKTYPE3 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE3, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE2) THEN
            RAISE_APPLICATION_ERROR(-20036, 'ATTACKTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE3_TXT existence if ATTACKTYPE3 is not empty
    IF :NEW.ATTACKTYPE3 IS NOT NULL AND :NEW.ATTACKTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20037, 'ATTACKTYPE3_TXT must be provided when ATTACKTYPE3 is not null.');
    END IF;
    
    -- Validate TARGTYPE1 format "Numbers Only"
    IF :NEW.TARGTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGTYPE1, '^[0-9]+$') OR LENGTH(:NEW.TARGTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20038, 'TARGTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGTYPE1_TXT existence if TARGTYPE1 is not empty
    IF :NEW.TARGTYPE1 IS NOT NULL AND :NEW.TARGTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20039, 'TARGTYPE1_TXT must be provided when TARGTYPE1 is not null.');
    END IF;
    
    -- Validate TARGSUBTYPE1 format "Numbers Only"
    IF :NEW.TARGSUBTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGSUBTYPE1, '^[0-9]+$') OR LENGTH(:NEW.TARGSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20040, 'TARGSUBTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGSUBTYPE1_TXT existence if TARGSUBTYPE1 is not empty
    IF :NEW.TARGSUBTYPE1 IS NOT NULL AND :NEW.TARGSUBTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20041, 'TARGSUBTYPE1_TXT must be provided when TARGSUBTYPE1 is not null.');
    END IF;
    
    --Validate CORP1 to be not more than 128 character BYTE
    IF :NEW.CORP1 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP1) > 128 THEN
            RAISE_APPLICATION_ERROR(-20042, 'CORP1 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
 
    --Validate TARGET1 to be not more than 128 character BYTE
    IF :NEW.TARGET1 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET1) > 128 THEN
            RAISE_APPLICATION_ERROR(-20043, 'TARGET1 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY1 format "Numbers Only"
    IF :NEW.NATLTY1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY1, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20044, 'NATLTY1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY1_TXT existence if NATLTY1 is not empty
    IF :NEW.NATLTY1 IS NOT NULL AND :NEW.NATLTY1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20045, 'NATLTY1_TXT must be provided when NATLTY1 is not null.');
    END IF;
    
        -- Validate TARGTYPE2 format "Numbers Only"
    IF :NEW.TARGTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGTYPE2, '^[0-9]+$') OR LENGTH(:NEW.TARGTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20046, 'TARGTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGTYPE2_TXT existence if TARGTYPE2 is not empty
    IF :NEW.TARGTYPE2 IS NOT NULL AND :NEW.TARGTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20047, 'TARGTYPE2_TXT must be provided when TARGTYPE2 is not null.');
    END IF;
    
    -- Validate TARGSUBTYPE2 format "Numbers Only"
    IF :NEW.TARGSUBTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGSUBTYPE2, '^[0-9]+$') OR LENGTH(:NEW.TARGSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20048, 'TARGSUBTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGSUBTYPE2_TXT existence if TARGSUBTYPE2 is not empty
    IF :NEW.TARGSUBTYPE2 IS NOT NULL AND :NEW.TARGSUBTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20049, 'TARGSUBTYPE2_TXT must be provided when TARGSUBTYPE2 is not null.');
        
    END IF;
    
    --Validate CORP2 to be not more than 128 character BYTE
    IF :NEW.CORP2 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20050, 'CORP2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
        --Validate TARGET2 to be not more than 128 character BYTE
    IF :NEW.TARGET2 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET2) > 128 THEN
            RAISE_APPLICATION_ERROR(-20051, 'TARGET2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY2 format "Numbers Only"
    IF :NEW.NATLTY2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY2, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20052, 'NATLTY2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY2_TXT existence if NATLTY2 is not empty
    IF :NEW.NATLTY2 IS NOT NULL AND :NEW.NATLTY2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20053, 'NATLTY2_TXT must be provided when NATLTY2 is not null.');
    END IF;
    
    --Validate CORP3 to be not more than 128 character BYTE
    IF :NEW.CORP3 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP3) > 26 THEN
            RAISE_APPLICATION_ERROR(-20054, 'CORP3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate TARGET3 to be not more than 128 character BYTE
    IF :NEW.TARGET3 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20055, 'TARGET3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY3 format "Numbers Only"
    IF :NEW.NATLTY3 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY3, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20056, 'NATLTY3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY3_TXT existence if NATLTY3 is not empty
    IF :NEW.NATLTY3 IS NOT NULL AND :NEW.NATLTY3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20057, 'NATLTY3_TXT must be provided when NATLTY2 is not null.');
    END IF;
    
    --Validate GNAME to be not more than 128 character BYTE
    IF :NEW.GNAME IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME) > 128 THEN
            RAISE_APPLICATION_ERROR(-20058, 'GNAME must be a string with a maximum length of 128 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME to be not more than 26 character BYTE
    IF :NEW.GSUBNAME IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME) > 128 THEN
            RAISE_APPLICATION_ERROR(-20059, 'GSUBNAME must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GNAME2 to be not more than 26 character BYTE
    IF :NEW.GNAME2 IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20060, 'GNAME2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME2 to be not more than 26 character BYTE
    IF :NEW.GSUBNAME2 IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20061, 'GSUBNAME must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GNAME3 to be not more than 26 character BYTE
    IF :NEW.GNAME3 IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20062, 'GNAME3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME3 to be not more than 26 character BYTE
    IF :NEW.GSUBNAME3 IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20063, 'GSUBNAME3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate MOTIVE to be not more than 256 character BYTE
    IF :NEW.MOTIVE IS NOT NULL THEN
        IF LENGTHB(:NEW.MOTIVE) > 256 THEN
            RAISE_APPLICATION_ERROR(-20064, 'MOTIVE must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
 
    -- Validate GUNCERTAIN1 to accept only 0 and 1
    IF :NEW.GUNCERTAIN1 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20065, 'GUNCERTAIN1 must be either 0 or 1 for No and Yes.');
    END IF;
    
    
    -- Validate GUNCERTAIN2 to accept only 0 and 1
    IF :NEW.GUNCERTAIN2 IS NOT NULL THEN
        IF :NEW.GUNCERTAIN2 NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20066, 'GUNCERTAIN2 must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;
    

    -- Validate GUNCERTAIN3 to accept only 0 and 1
    IF :NEW.GUNCERTAIN3 IS NOT NULL THEN
        IF :NEW.GUNCERTAIN3 NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20067, 'GUNCERTAIN3 must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;

    
    -- Validate INDIVIDUAL to accept only 0 and 1
    IF :NEW.INDIVIDUAL NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20068, 'INDIVIDUAL must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate NPERPS format "Numbers Only"
    IF :NEW.NPERPS IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.NPERPS, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20069, 'NPERPS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate NPERPCAP format "Numbers Only"
    IF :NEW.NPERPCAP IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.NPERPCAP, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20070, 'NPERPCAP must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate CLAIMED to accept only 0 and 1
    IF :NEW.CLAIMED IS NOT NULL THEN 
        IF :NEW.CLAIMED NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20071, 'INDIVIDUAL must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE format "Numbers Only"
    IF :NEW.CLAIMMODE IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20072, 'CLAIMMODE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE_TXT existence if CLAIMMODE is not empty
    IF :NEW.CLAIMMODE IS NOT NULL AND :NEW.CLAIMMODE_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20073, 'CLAIMMODE_TXT must be provided when CLAIMMODE is not null.');
    END IF;
    
    -- Validate CLAIM2 format "Numbers Only"
    IF :NEW.CLAIM2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIM2, '^[0-9]+$') OR LENGTH(:NEW.CLAIM2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20074, 'CLAIM2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE2 format "Numbers Only"
    IF :NEW.CLAIMMODE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE2, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20075, 'CLAIMMODE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE2_TXT existence if CLAIMMODE2 is not empty
    IF :NEW.CLAIMMODE2 IS NOT NULL AND :NEW.CLAIMMODE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20076, 'CLAIMMODE2_TXT must be provided when CLAIM2 is not null.');
    END IF;
    
    -- Validate CLAIM3 format "Numbers Only"
    IF :NEW.CLAIM3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIM3, '^[0-9]+$') OR LENGTH(:NEW.CLAIM3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20077, 'CLAIM3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE3 format "Numbers Only"
    IF :NEW.CLAIMMODE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE3, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20078, 'CLAIMMODE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE3_TXT existence if CLAIM3 is not empty
    IF :NEW.CLAIMMODE3 IS NOT NULL AND :NEW.CLAIMMODE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20079, 'CLAIMMODE3_TXT must be provided when CLAIM3 is not null.');
    END IF;
    
    IF :NEW.COMPCLAIM IS NOT NULL THEN
        IF LENGTHB(:NEW.COMPCLAIM) > 26 THEN
            RAISE_APPLICATION_ERROR(-20080, 'COMPCLAIM must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate WEAPTYPE1 format "Numbers Only"
    IF :NEW.WEAPTYPE1 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE1, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20081, 'WEAPTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE1_TXT existence if WEAPTYPE1 is not empty
    IF :NEW.WEAPTYPE1 IS NOT NULL AND :NEW.WEAPTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20082, 'WEAPTYPE1_TXT must be provided when WEAPTYPE1 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE1 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE1 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE1, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20083, 'WEAPSUBTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE1_TXT existence if WEAPSUBTYPE1 is not empty
    IF :NEW.WEAPSUBTYPE1 IS NOT NULL AND :NEW.WEAPSUBTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20084, 'WEAPSUBTYPE1_TXT must be provided when WEAPSUBTYPE1 is not null.');
    END IF;
    
    -- Validate WEAPTYPE2 format "Numbers Only"
    IF :NEW.WEAPTYPE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE2, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20085, 'WEAPTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE2_TXT existence if WEAPTYPE2 is not empty
    IF :NEW.WEAPTYPE2 IS NOT NULL AND :NEW.WEAPTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20086, 'WEAPTYPE2_TXT must be provided when WEAPTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE2 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE2, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20087, 'WEAPSUBTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE2_TXT existence if WEAPSUBTYPE2 is not empty
    IF :NEW.WEAPSUBTYPE2 IS NOT NULL AND :NEW.WEAPSUBTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20088, 'WEAPSUBTYPE2_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPTYPE3 format "Numbers Only"
    IF :NEW.WEAPTYPE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE3, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20089, 'WEAPTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE3_TXT existence if WEAPTYPE3 is not empty
    IF :NEW.WEAPTYPE3 IS NOT NULL AND :NEW.WEAPTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20090, 'WEAPTYPE3_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE3 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE3, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20091, 'WEAPSUBTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE3_TXT existence if WEAPSUBTYPE3 is not empty
    IF :NEW.WEAPSUBTYPE3 IS NOT NULL AND :NEW.WEAPSUBTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20092, 'WEAPSUBTYPE4_TXT must be provided when WEAPSUBTYPE4 is not null.');
    END IF;
    
        -- Validate WEAPTYPE4 format "Numbers Only"
    IF :NEW.WEAPTYPE4 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE4, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE4) > 38 THEN
            RAISE_APPLICATION_ERROR(-20093, 'WEAPTYPE4 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE4_TXT existence if WEAPTYPE4 is not empty
    IF :NEW.WEAPTYPE4 IS NOT NULL AND :NEW.WEAPTYPE4_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20094, 'WEAPTYPE4_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE4 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE4 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE4, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE4) > 38 THEN
            RAISE_APPLICATION_ERROR(-20095, 'WEAPSUBTYPE4 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE4_TXT existence if WEAPSUBTYPE4 is not empty
    IF :NEW.WEAPSUBTYPE4 IS NOT NULL AND :NEW.WEAPSUBTYPE4_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20096, 'WEAPSUBTYPE4_TXT must be provided when WEAPSUBTYPE4 is not null.');
    END IF;
    
    --Validate WEAPDETAIL size
    IF :NEW.WEAPDETAIL IS NOT NULL THEN
        IF LENGTH(:NEW.WEAPDETAIL) > 256 THEN
            RAISE_APPLICATION_ERROR(-20097, 'WEAPDETAIL must be a numeric value with up to 256 characters.');
        END IF;
    END IF;
    
    -- Validate NKILL format "Numbers Only"
    IF :NEW.NKILL IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILL, '^[0-9]+$') OR LENGTH(:NEW.NKILL) > 38 THEN
            RAISE_APPLICATION_ERROR(-20098, 'NKILL must be must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NKILLUS format "Numbers Only"
    IF :NEW.NKILLUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILLUS, '^[0-9]+$') OR LENGTH(:NEW.NKILLUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20099, 'NKILLUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NKILLTER format "Numbers Only"
    IF :NEW.NKILLTER IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILLTER, '^[0-9]+$') OR LENGTH(:NEW.NKILLTER) > 38 THEN
            RAISE_APPLICATION_ERROR(-20100, 'NKILLTER must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUND format "Numbers Only"
    IF :NEW.NWOUND IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUND, '^[0-9]+$') OR LENGTH(:NEW.NWOUND) > 38 THEN
            RAISE_APPLICATION_ERROR(-20101, 'NWOUND must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUNDUS format "Numbers Only"
    IF :NEW.NWOUNDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUNDUS, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20102, 'NWOUNDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUNDTE format "Numbers Only"
    IF :NEW.NWOUNDTE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUNDTE, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDTE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20103, 'NKILL must be a numeric value with up to 38 digits.');
        END IF;
    END IF;    
    
    -- Validate PROPERTY format "Numbers Only"
    IF :NEW.PROPERTY IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.PROPERTY, '^[0-9]+$') OR LENGTH(:NEW.PROPERTY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20104, 'PROPERTY must be a numeric value with up to 38 digits.');
        END IF;
    END IF;    
    
    
    -- Validate PROPEXTENT format "Numbers Only"
    IF :NEW.PROPEXTENT IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.PROPEXTENT, '^[0-9]+$') OR LENGTH(:NEW.PROPEXTENT) > 38 THEN
            RAISE_APPLICATION_ERROR(-20105, 'PROPEXTENT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate PROPEXTENT_TXT existence if PROPEXTENT is not empty
    IF :NEW.PROPEXTENT IS NOT NULL AND :NEW.PROPEXTENT_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20106, 'PROPEXTENT_TXT must be provided when PROPEXTENT is not null.');
    END IF;
    
    -- Validate PROPVALUE to accept only "Numbers Only"
    IF :NEW.PROPVALUE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.PROPVALUE, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20107, 'PROPVALUE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate PROPCOMMENT size
    IF :NEW.PROPCOMMENT IS NOT NULL THEN
        IF LENGTHB(:NEW.PROPCOMMENT) > 256 THEN            
            RAISE_APPLICATION_ERROR(-20108, 'PROPCOMMENT must be a string with a maximum length of 256 bytes.');
        END IF;
    END IF;
    
    -- Validate ISHOSTKID to accept only 0 and 1
    IF :NEW.ISHOSTKID NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20109, 'ISHOSTKID must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate NHOSTKID to accept only "Numbers Only"
    IF :NEW.NHOSTKID IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOSTKID, '^[0-9]+$') OR LENGTH(:NEW.NHOSTKID) > 38 THEN
            RAISE_APPLICATION_ERROR(-20110, 'NHOSTKID must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NHOSTKIDUS to accept only "Numbers Only"
    IF :NEW.NHOSTKIDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOSTKIDUS, '^[0-9]+$') OR LENGTH(:NEW.NHOSTKIDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20111, 'NHOSTKIDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NHOURS to accept only "Numbers Only"
    IF :NEW.NHOURS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOURS, '^[0-9]+$') OR LENGTH(:NEW.NHOURS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20112, 'NHOURS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NDAYS to accept only "Numbers Only"
    IF :NEW.NDAYS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NDAYS, '^[0-9]+$') OR LENGTH(:NEW.NDAYS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20113, 'NDAYS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate DIVERT size
    IF :NEW.DIVERT IS NOT NULL THEN
        IF LENGTHB(:NEW.DIVERT) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20114, 'DIVERT must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate KIDHIJCOUNTRY size
    IF :NEW.KIDHIJCOUNTRY IS NOT NULL THEN
        IF LENGTHB(:NEW.KIDHIJCOUNTRY) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20115, 'KIDHIJCOUNTRY must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate RANSOM to accept only 0 and 1
    IF :NEW.RANSOM NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20116, 'RANSOM must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate RANSOMAMT to accept only "Numbers Only"
    IF :NEW.RANSOMAMT IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMAMT, '^[0-9]+$') OR LENGTH(:NEW.RANSOMAMT) > 38 THEN
            RAISE_APPLICATION_ERROR(-20117, 'RANSOMAMT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate RANSOMAMTUS to accept only "Numbers Only"
    IF :NEW.RANSOMAMTUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMAMTUS, '^[0-9]+$') OR LENGTH(:NEW.RANSOMAMTUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20118, 'RANSOMAMT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
        
    -- Validate RANSOMPAID to accept only "Numbers Only"
    IF :NEW.RANSOMPAID IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMPAID, '^[0-9]+$') OR LENGTH(:NEW.RANSOMPAID) > 38 THEN
            RAISE_APPLICATION_ERROR(-20119, 'RANSOMPAID must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate RANSOMPAIDUS to accept only "Numbers Only"
    IF :NEW.RANSOMPAIDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMPAIDUS, '^[0-9]+$') OR LENGTH(:NEW.RANSOMPAIDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20120, 'RANSOMPAIDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate RANSOMNOTE size
    IF :NEW.RANSOMNOTE IS NOT NULL THEN
        IF LENGTHB(:NEW.RANSOMNOTE) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20121, 'RANSOMNOTE must not exceed 26 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate HOSTKIDOUTCOME format "Numbers Only"
    IF :NEW.HOSTKIDOUTCOME IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.HOSTKIDOUTCOME, '^[0-9]+$') OR LENGTH(:NEW.HOSTKIDOUTCOME) > 38 THEN
            RAISE_APPLICATION_ERROR(-20122, 'HOSTKIDOUTCOME must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate HOSTKIDOUTCOME_TXT existence if HOSTKIDOUTCOME is not empty
    IF :NEW.HOSTKIDOUTCOME IS NOT NULL AND :NEW.HOSTKIDOUTCOME_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20123, 'HOSTKIDOUTCOME_TXT must be provided when HOSTKIDOUTCOME is not null.');
    END IF;
    
    -- Validate NRELEASED size
    IF :NEW.NRELEASED IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NRELEASED, '^[0-9]+$') OR LENGTH(:NEW.NRELEASED) > 38 THEN
            RAISE_APPLICATION_ERROR(-20124, 'NRELEASED must not exceed 38 Characters.');
        END IF;
    END IF;
    
    -- Validate ADDNOTES size
    IF :NEW.ADDNOTES IS NOT NULL THEN
        IF LENGTHB(:NEW.ADDNOTES) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20125, 'ADDNOTES must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;    
    
    -- Validate SCITE1 size
    IF :NEW.SCITE1 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE1) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20126, 'SCITE1 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;

    -- Validate SCITE2 size
    IF :NEW.SCITE2 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE2) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20127, 'SCITE2 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate SCITE3 size
    IF :NEW.SCITE3 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE3) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20128, 'SCITE3 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate DBSOURCE size
    IF :NEW.DBSOURCE IS NOT NULL THEN
        IF LENGTHB(:NEW.DBSOURCE) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20129, 'DBSOURCE must not exceed 26 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate INT_LOG to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_LOG, '^[0-9]+$') OR LENGTH(:NEW.INT_LOG) > 38 THEN
        RAISE_APPLICATION_ERROR(-20130, 'INT_LOG must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_IDEO to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_IDEO, '^[0-9]+$') OR LENGTH(:NEW.INT_IDEO) > 38 THEN
        RAISE_APPLICATION_ERROR(-20131, 'INT_IDEO must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_MISC to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_MISC, '^[0-9]+$') OR LENGTH(:NEW.INT_MISC) > 38 THEN
        RAISE_APPLICATION_ERROR(-20132, 'INT_MISC must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_ANY to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_ANY, '^[0-9]+$') OR LENGTH(:NEW.INT_ANY) > 38 THEN
        RAISE_APPLICATION_ERROR(-20133, 'INT_ANY must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate RELATED size
    IF :NEW.RELATED IS NOT NULL THEN
        IF LENGTHB(:NEW.RELATED) > 128 THEN            
            RAISE_APPLICATION_ERROR(-20134, 'RELATED must not exceed 128 BYTE Characters.');
        END IF;
    END IF;
    
    SELECT COUNT(*) s
    INTO v_count
    FROM GLOBALTERRORISM
    WHERE IYEAR = :NEW.IYEAR
      AND IMONTH = :NEW.IMONTH
      AND IDAY = :NEW.IDAY;
    -- Generate the EVENTID based on IYEAR, IMONTH, IDAY, and the occurrence count
    :NEW.EVENTID := TO_CHAR(:NEW.IYEAR, 'FM0000') ||
                    TO_CHAR(:NEW.IMONTH, 'FM00') ||
                    TO_CHAR(:NEW.IDAY, 'FM00') ||
                    TO_CHAR(v_count + 1, 'FM0000');
                    
END;
/
CREATE OR REPLACE TRIGGER after_insert_globalterrorism
AFTER INSERT ON GLOBALTERRORISM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Data Inserted Successfully');
END;
/
CREATE OR REPLACE TRIGGER before_update_globalterrorism
BEFORE UPDATE ON GLOBALTERRORISM
FOR EACH ROW
BEGIN
    -- Validate data before insertion
    IF :NEW.IYEAR < 1970 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Year cannot be before 1970.');
    END IF;
    IF :NEW.IMONTH > 12 OR :NEW.IMONTH < 0 THEN 
        RAISE_APPLICATION_ERROR(-20002, 'Month cannot be more than 12 or less than 1');
    END IF;
    
    -- Validate day of the month
    CASE
        WHEN :NEW.IMONTH IN (1, 3, 5, 7, 8, 10, 12) THEN -- Months with 31 days
            IF :NEW.IDAY < 1 OR :NEW.IDAY > 31 THEN
                RAISE_APPLICATION_ERROR(-20003, 'Day must be between 1 and 31 for the given month.');
            END IF;
        WHEN :NEW.IMONTH IN (4, 6, 9, 11) THEN -- Months with 30 days
            IF :NEW.IDAY < 1 OR :NEW.IDAY > 30 THEN
                RAISE_APPLICATION_ERROR(-20004, 'Day must be between 1 and 30 for the given month.');
            END IF;
        WHEN :NEW.IMONTH = 2 THEN -- February, handle leap year
            IF (:NEW.IYEAR MOD 4 = 0 AND :NEW.IYEAR MOD 100 <> 0) OR (:NEW.IYEAR MOD 400 = 0) THEN
                IF :NEW.IDAY < 1 OR :NEW.IDAY > 29 THEN
                    RAISE_APPLICATION_ERROR(-20005, 'Day must be between 1 and 29 for February in a leap year.');
                END IF;
            ELSE
                IF :NEW.IDAY < 1 OR :NEW.IDAY > 28 THEN
                    RAISE_APPLICATION_ERROR(-20006, 'Day (IDAY) must be between 1 and 28 for February in a non-leap year.');
                END IF;
            END IF;
    END CASE;
    
    -- Validate APPROXDATE format "Month Day-Day, Year"
    IF :NEW.APPROXDATE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.APPROXDATE, '^[[:alpha:]]+ [0-9]{1,2}-[0-9]{1,2}, [0-9]{4}$') THEN
            RAISE_APPLICATION_ERROR(-20007, 'APPROXDATE must be in the format "Month Day-Day, Year".');
        END IF;
    END IF;
    
    
    -- Validate EXTENDED to accept only 0 and 1
    IF :NEW.EXTENDED NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20008, 'EXTENDED must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate RESOLUTION format "Day/Month/Year"
    IF :NEW.RESOLUTION IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RESOLUTION, '^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$') THEN
            RAISE_APPLICATION_ERROR(-20009, 'Date must be in the format Day/Month/Year (e.g., 3/15/2016).');
        END IF;
    END IF;
    
    -- Validate COUNTRY format "Numbers Only"
    IF :NEW.COUNTRY IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.COUNTRY, '^[0-9]+$') OR LENGTH(:NEW.COUNTRY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20010, 'COUNTRY must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate COUNTRY_TXT existence if COUNTRY is not empty
    IF :NEW.COUNTRY IS NOT NULL AND :NEW.COUNTRY_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20011, 'COUNTRY_TXT must be provided when COUNTRY is not null.');
    END IF;
    
    
    -- Validate REGION format "Numbers Only"    
    IF :NEW.REGION IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.REGION, '^[0-9]+$') OR LENGTH(:NEW.REGION) > 38 THEN
            RAISE_APPLICATION_ERROR(-20012, 'REGION must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate REGION_TXT existence if REGION is not empty
    IF :NEW.REGION IS NOT NULL AND :NEW.REGION_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20013, 'REGION_TXT must be provided when REGION is not null.');
    END IF;
    
    --Validate PROVSTATE existence if PROVSTATE is not empty
    IF :NEW.PROVSTATE IS NOT NULL THEN
        IF LENGTH(:NEW.PROVSTATE) > 26 THEN
            RAISE_APPLICATION_ERROR(-20014, 'PROVSTATE must be a string of 26 bytes or less.');
        END IF;
    END IF;
    
    --Validate CITY existence if CITY is not empty
    IF :NEW.CITY IS NOT NULL THEN
        IF LENGTH(:NEW.CITY) > 26 THEN
            RAISE_APPLICATION_ERROR(-20015, 'PROVSTATE must be a string of 26 bytes or less.');
        END IF;
    END IF;
    
    -- Check if LATITUDE is either NULL (empty) or a valid number with precision NUMBER(38,6)
    IF :NEW.LATITUDE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.LATITUDE, '^-?\d{1,32}(\.\d{0,6})?$') THEN
            RAISE_APPLICATION_ERROR(-20016, 'LATITUDE must be a valid number with up to 38 digits and 6 decimal places.');
        END IF;
    END IF;
    
    -- Check if LONGITUDE is either NULL (empty) or a valid number with precision NUMBER(38,6)
    IF :NEW.LONGITUDE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.LONGITUDE, '^-?\d{1,32}(\.\d{0,6})?$') THEN
            RAISE_APPLICATION_ERROR(-20017, 'LONGITUDE must be a valid number with up to 38 digits and 6 decimal places.');
        END IF;
    END IF;    
    
    -- Validate SPECIFICITY to accept only numeric value
    IF :NEW.SPECIFICITY IS NOT NULL THEN
        IF REGEXP_LIKE(:NEW.SPECIFICITY, '^[0-9]+$') OR LENGTH(:NEW.SPECIFICITY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20018, 'SPECIFICITY must be a valid number with up to 38 digits.');
        END IF;    
    END IF;
    
    -- Validate VICINITY to accept only 0 and 1
    IF :NEW.VICINITY NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20019, 'VICINITY must be either 0 or 1 for No and Yes.');
    END IF;
    
    --Validate LOCATION to be not more than 128 character BYTE
    IF :NEW.LOCATION IS NOT NULL THEN
        IF LENGTHB(:NEW.LOCATION) > 128 THEN
            RAISE_APPLICATION_ERROR(-20020, 'CORP3 must be a string with a maximum length of 128 bytes.');
        END IF;
    END IF;
    
    --Validate SUMMARY to be not more than 1024 character BYTE
    IF :NEW.SUMMARY IS NOT NULL THEN
        IF LENGTHB(:NEW.SUMMARY) > 1024 THEN
            RAISE_APPLICATION_ERROR(-20021, 'SUMMARY must be a string with a maximum length of 1024 bytes.');
        END IF;
    END IF;
    
    -- Validate CRIT1 to accept only 0 and 1
    IF :NEW.CRIT1 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20022, 'CRIT1 must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate CRIT2 to accept only 0 and 1
    IF :NEW.CRIT2 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20023, 'CRIT2 must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate CRIT3 to accept only 0 and 1
    IF :NEW.CRIT3 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20024, 'CRIT3 must be either 0 or 1 for No and Yes.');
    END IF;
    
    --Validate DOUBTTERR to accept numeric value
    IF REGEXP_LIKE(:NEW.DOUBTTERR, '^[0-9]+$') OR LENGTH(:NEW.DOUBTTERR) > 38 THEN
        RAISE_APPLICATION_ERROR(-20025, 'DOUBTTERR must be a valid number with up to 38 digits.');
    END IF;
    
    -- Validate ALTERNATIVE format "Numbers Only"    
    IF :NEW.ALTERNATIVE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ALTERNATIVE, '^[0-9]+$') OR LENGTH(:NEW.ALTERNATIVE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20026, 'ALTERNATIVE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ALTERNATIVE_TXT existence if ALTERNATIVE is not empty
    IF :NEW.ALTERNATIVE IS NOT NULL AND :NEW.ALTERNATIVE_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20027, 'ALTERNATIVE_TXT must be provided when ALTERNATIVE is not null.');
        IF LENGTHB(:NEW.ALTERNATIVE_TXT) > 128 THEN 
            RAISE_APPLICATION_ERROR(-20028, 'ALTERNATIVE_TXT must be provided when REGION is not null or .');
        END IF;
    END IF;
    
    -- Validate MULTIPLE to accept only 0 and 1
    IF :NEW.MULTIPLE NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20029, 'MULTIPLE must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate SUCCESS to accept only 0 and 1
    IF :NEW.SUCCESS NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20030, 'SUCCESS must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate SUICIDE to accept only 0 and 1
    IF :NEW.SUICIDE NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20031, 'SUICIDE must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate ATTACKTYPE1 format "Numbers Only"
    IF :NEW.ATTACKTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE1, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20032, 'ATTACKTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE1_TXT existence if ATTACKTYPE1 is not empty
    IF :NEW.ATTACKTYPE1 IS NOT NULL AND :NEW.ATTACKTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20033, 'ATTACKTYPE1_TXT must be provided when ATTACKTYPE1 is not null.');
    END IF;
    
    -- Validate ATTACKTYPE2 format "Numbers Only"
    IF :NEW.ATTACKTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE2, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20034, 'ATTACKTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE2_TXT existence if ATTACKTYPE2 is not empty
    IF :NEW.ATTACKTYPE2 IS NOT NULL AND :NEW.ATTACKTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20035, 'ATTACKTYPE2_TXT must be provided when ATTACKTYPE2 is not null.');
    END IF;
    
    -- Validate ATTACKTYPE3 format "Numbers Only"
    IF :NEW.ATTACKTYPE3 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.ATTACKTYPE3, '^[0-9]+$') OR LENGTH(:NEW.ATTACKTYPE2) THEN
            RAISE_APPLICATION_ERROR(-20036, 'ATTACKTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate ATTACKTYPE3_TXT existence if ATTACKTYPE3 is not empty
    IF :NEW.ATTACKTYPE3 IS NOT NULL AND :NEW.ATTACKTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20037, 'ATTACKTYPE3_TXT must be provided when ATTACKTYPE3 is not null.');
    END IF;
    
    -- Validate TARGTYPE1 format "Numbers Only"
    IF :NEW.TARGTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGTYPE1, '^[0-9]+$') OR LENGTH(:NEW.TARGTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20038, 'TARGTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGTYPE1_TXT existence if TARGTYPE1 is not empty
    IF :NEW.TARGTYPE1 IS NOT NULL AND :NEW.TARGTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20039, 'TARGTYPE1_TXT must be provided when TARGTYPE1 is not null.');
    END IF;
    
    -- Validate TARGSUBTYPE1 format "Numbers Only"
    IF :NEW.TARGSUBTYPE1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGSUBTYPE1, '^[0-9]+$') OR LENGTH(:NEW.TARGSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20040, 'TARGSUBTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGSUBTYPE1_TXT existence if TARGSUBTYPE1 is not empty
    IF :NEW.TARGSUBTYPE1 IS NOT NULL AND :NEW.TARGSUBTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20041, 'TARGSUBTYPE1_TXT must be provided when TARGSUBTYPE1 is not null.');
    END IF;
    
    --Validate CORP1 to be not more than 128 character BYTE
    IF :NEW.CORP1 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP1) > 128 THEN
            RAISE_APPLICATION_ERROR(-20042, 'CORP1 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
 
    --Validate TARGET1 to be not more than 128 character BYTE
    IF :NEW.TARGET1 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET1) > 128 THEN
            RAISE_APPLICATION_ERROR(-20043, 'TARGET1 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY1 format "Numbers Only"
    IF :NEW.NATLTY1 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY1, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20044, 'NATLTY1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY1_TXT existence if NATLTY1 is not empty
    IF :NEW.NATLTY1 IS NOT NULL AND :NEW.NATLTY1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20045, 'NATLTY1_TXT must be provided when NATLTY1 is not null.');
    END IF;
    
        -- Validate TARGTYPE2 format "Numbers Only"
    IF :NEW.TARGTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGTYPE2, '^[0-9]+$') OR LENGTH(:NEW.TARGTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20046, 'TARGTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGTYPE2_TXT existence if TARGTYPE2 is not empty
    IF :NEW.TARGTYPE2 IS NOT NULL AND :NEW.TARGTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20047, 'TARGTYPE2_TXT must be provided when TARGTYPE2 is not null.');
    END IF;
    
    -- Validate TARGSUBTYPE2 format "Numbers Only"
    IF :NEW.TARGSUBTYPE2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.TARGSUBTYPE2, '^[0-9]+$') OR LENGTH(:NEW.TARGSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20048, 'TARGSUBTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;

    --Validate TARGSUBTYPE2_TXT existence if TARGSUBTYPE2 is not empty
    IF :NEW.TARGSUBTYPE2 IS NOT NULL AND :NEW.TARGSUBTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20049, 'TARGSUBTYPE2_TXT must be provided when TARGSUBTYPE2 is not null.');
        
    END IF;
    
    --Validate CORP2 to be not more than 128 character BYTE
    IF :NEW.CORP2 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20050, 'CORP2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
        --Validate TARGET2 to be not more than 128 character BYTE
    IF :NEW.TARGET2 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET2) > 128 THEN
            RAISE_APPLICATION_ERROR(-20051, 'TARGET2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY2 format "Numbers Only"
    IF :NEW.NATLTY2 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY2, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20052, 'NATLTY2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY2_TXT existence if NATLTY2 is not empty
    IF :NEW.NATLTY2 IS NOT NULL AND :NEW.NATLTY2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20053, 'NATLTY2_TXT must be provided when NATLTY2 is not null.');
    END IF;
    
    --Validate CORP3 to be not more than 128 character BYTE
    IF :NEW.CORP3 IS NOT NULL THEN
        IF LENGTHB(:NEW.CORP3) > 26 THEN
            RAISE_APPLICATION_ERROR(-20054, 'CORP3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate TARGET3 to be not more than 128 character BYTE
    IF :NEW.TARGET3 IS NOT NULL THEN
        IF LENGTHB(:NEW.TARGET3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20055, 'TARGET3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate NATLTY3 format "Numbers Only"
    IF :NEW.NATLTY3 IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NATLTY3, '^[0-9]+$') OR LENGTH(:NEW.NATLTY1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20056, 'NATLTY3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate NATLTY3_TXT existence if NATLTY3 is not empty
    IF :NEW.NATLTY3 IS NOT NULL AND :NEW.NATLTY3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20057, 'NATLTY3_TXT must be provided when NATLTY2 is not null.');
    END IF;
    
    --Validate GNAME to be not more than 128 character BYTE
    IF :NEW.GNAME IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME) > 128 THEN
            RAISE_APPLICATION_ERROR(-20058, 'GNAME must be a string with a maximum length of 128 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME to be not more than 26 character BYTE
    IF :NEW.GSUBNAME IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME) > 128 THEN
            RAISE_APPLICATION_ERROR(-20059, 'GSUBNAME must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GNAME2 to be not more than 26 character BYTE
    IF :NEW.GNAME2 IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20060, 'GNAME2 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME2 to be not more than 26 character BYTE
    IF :NEW.GSUBNAME2 IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME2) > 26 THEN
            RAISE_APPLICATION_ERROR(-20061, 'GSUBNAME must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GNAME3 to be not more than 26 character BYTE
    IF :NEW.GNAME3 IS NOT NULL THEN
        IF LENGTHB(:NEW.GNAME3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20062, 'GNAME3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate GSUBNAME3 to be not more than 26 character BYTE
    IF :NEW.GSUBNAME3 IS NOT NULL THEN
        IF LENGTHB(:NEW.GSUBNAME3) > 128 THEN
            RAISE_APPLICATION_ERROR(-20063, 'GSUBNAME3 must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    --Validate MOTIVE to be not more than 256 character BYTE
    IF :NEW.MOTIVE IS NOT NULL THEN
        IF LENGTHB(:NEW.MOTIVE) > 256 THEN
            RAISE_APPLICATION_ERROR(-20064, 'MOTIVE must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
 
    -- Validate GUNCERTAIN1 to accept only 0 and 1
    IF :NEW.GUNCERTAIN1 NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20065, 'GUNCERTAIN1 must be either 0 or 1 for No and Yes.');
    END IF;
    
    
    -- Validate GUNCERTAIN2 to accept only 0 and 1
    IF :NEW.GUNCERTAIN2 IS NOT NULL THEN
        IF :NEW.GUNCERTAIN2 NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20066, 'GUNCERTAIN2 must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;
    

    -- Validate GUNCERTAIN3 to accept only 0 and 1
    IF :NEW.GUNCERTAIN3 IS NOT NULL THEN
        IF :NEW.GUNCERTAIN3 NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20067, 'GUNCERTAIN3 must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;

    
    -- Validate INDIVIDUAL to accept only 0 and 1
    IF :NEW.INDIVIDUAL NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20068, 'INDIVIDUAL must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate NPERPS format "Numbers Only"
    IF :NEW.NPERPS IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.NPERPS, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20069, 'NPERPS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate NPERPCAP format "Numbers Only"
    IF :NEW.NPERPCAP IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.NPERPCAP, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20070, 'NPERPCAP must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate CLAIMED to accept only 0 and 1
    IF :NEW.CLAIMED IS NOT NULL THEN 
        IF :NEW.CLAIMED NOT IN (0, 1) THEN
            RAISE_APPLICATION_ERROR(-20071, 'INDIVIDUAL must be either 0 or 1 for No and Yes.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE format "Numbers Only"
    IF :NEW.CLAIMMODE IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20072, 'CLAIMMODE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE_TXT existence if CLAIMMODE is not empty
    IF :NEW.CLAIMMODE IS NOT NULL AND :NEW.CLAIMMODE_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20073, 'CLAIMMODE_TXT must be provided when CLAIMMODE is not null.');
    END IF;
    
    -- Validate CLAIM2 format "Numbers Only"
    IF :NEW.CLAIM2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIM2, '^[0-9]+$') OR LENGTH(:NEW.CLAIM2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20074, 'CLAIM2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE2 format "Numbers Only"
    IF :NEW.CLAIMMODE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE2, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20075, 'CLAIMMODE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE2_TXT existence if CLAIMMODE2 is not empty
    IF :NEW.CLAIMMODE2 IS NOT NULL AND :NEW.CLAIMMODE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20076, 'CLAIMMODE2_TXT must be provided when CLAIM2 is not null.');
    END IF;
    
    -- Validate CLAIM3 format "Numbers Only"
    IF :NEW.CLAIM3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIM3, '^[0-9]+$') OR LENGTH(:NEW.CLAIM3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20077, 'CLAIM3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate CLAIMMODE3 format "Numbers Only"
    IF :NEW.CLAIMMODE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.CLAIMMODE3, '^[0-9]+$') OR LENGTH(:NEW.CLAIMMODE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20078, 'CLAIMMODE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate CLAIMMODE3_TXT existence if CLAIM3 is not empty
    IF :NEW.CLAIMMODE3 IS NOT NULL AND :NEW.CLAIMMODE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20079, 'CLAIMMODE3_TXT must be provided when CLAIM3 is not null.');
    END IF;
    
    IF :NEW.COMPCLAIM IS NOT NULL THEN
        IF LENGTHB(:NEW.COMPCLAIM) > 26 THEN
            RAISE_APPLICATION_ERROR(-20080, 'COMPCLAIM must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate WEAPTYPE1 format "Numbers Only"
    IF :NEW.WEAPTYPE1 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE1, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20081, 'WEAPTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE1_TXT existence if WEAPTYPE1 is not empty
    IF :NEW.WEAPTYPE1 IS NOT NULL AND :NEW.WEAPTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20082, 'WEAPTYPE1_TXT must be provided when WEAPTYPE1 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE1 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE1 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE1, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE1) > 38 THEN
            RAISE_APPLICATION_ERROR(-20083, 'WEAPSUBTYPE1 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE1_TXT existence if WEAPSUBTYPE1 is not empty
    IF :NEW.WEAPSUBTYPE1 IS NOT NULL AND :NEW.WEAPSUBTYPE1_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20084, 'WEAPSUBTYPE1_TXT must be provided when WEAPSUBTYPE1 is not null.');
    END IF;
    
    -- Validate WEAPTYPE2 format "Numbers Only"
    IF :NEW.WEAPTYPE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE2, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20085, 'WEAPTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE2_TXT existence if WEAPTYPE2 is not empty
    IF :NEW.WEAPTYPE2 IS NOT NULL AND :NEW.WEAPTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20086, 'WEAPTYPE2_TXT must be provided when WEAPTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE2 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE2 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE2, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE2) > 38 THEN
            RAISE_APPLICATION_ERROR(-20087, 'WEAPSUBTYPE2 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE2_TXT existence if WEAPSUBTYPE2 is not empty
    IF :NEW.WEAPSUBTYPE2 IS NOT NULL AND :NEW.WEAPSUBTYPE2_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20088, 'WEAPSUBTYPE2_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPTYPE3 format "Numbers Only"
    IF :NEW.WEAPTYPE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE3, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20089, 'WEAPTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE3_TXT existence if WEAPTYPE3 is not empty
    IF :NEW.WEAPTYPE3 IS NOT NULL AND :NEW.WEAPTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20090, 'WEAPTYPE3_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE3 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE3 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE3, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE3) > 38 THEN
            RAISE_APPLICATION_ERROR(-20091, 'WEAPSUBTYPE3 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE3_TXT existence if WEAPSUBTYPE3 is not empty
    IF :NEW.WEAPSUBTYPE3 IS NOT NULL AND :NEW.WEAPSUBTYPE3_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20092, 'WEAPSUBTYPE4_TXT must be provided when WEAPSUBTYPE4 is not null.');
    END IF;
    
        -- Validate WEAPTYPE4 format "Numbers Only"
    IF :NEW.WEAPTYPE4 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPTYPE4, '^[0-9]+$') OR LENGTH(:NEW.WEAPTYPE4) > 38 THEN
            RAISE_APPLICATION_ERROR(-20093, 'WEAPTYPE4 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPTYPE4_TXT existence if WEAPTYPE4 is not empty
    IF :NEW.WEAPTYPE4 IS NOT NULL AND :NEW.WEAPTYPE4_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20094, 'WEAPTYPE4_TXT must be provided when WEAPSUBTYPE2 is not null.');
    END IF;
    
    -- Validate WEAPSUBTYPE4 format "Numbers Only"
    IF :NEW.WEAPSUBTYPE4 IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.WEAPSUBTYPE4, '^[0-9]+$') OR LENGTH(:NEW.WEAPSUBTYPE4) > 38 THEN
            RAISE_APPLICATION_ERROR(-20095, 'WEAPSUBTYPE4 must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate WEAPSUBTYPE4_TXT existence if WEAPSUBTYPE4 is not empty
    IF :NEW.WEAPSUBTYPE4 IS NOT NULL AND :NEW.WEAPSUBTYPE4_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20096, 'WEAPSUBTYPE4_TXT must be provided when WEAPSUBTYPE4 is not null.');
    END IF;
    
    --Validate WEAPDETAIL size
    IF :NEW.WEAPDETAIL IS NOT NULL THEN
        IF LENGTH(:NEW.WEAPDETAIL) > 256 THEN
            RAISE_APPLICATION_ERROR(-20097, 'WEAPDETAIL must be a numeric value with up to 256 characters.');
        END IF;
    END IF;
    
    -- Validate NKILL format "Numbers Only"
    IF :NEW.NKILL IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILL, '^[0-9]+$') OR LENGTH(:NEW.NKILL) > 38 THEN
            RAISE_APPLICATION_ERROR(-20098, 'NKILL must be must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NKILLUS format "Numbers Only"
    IF :NEW.NKILLUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILLUS, '^[0-9]+$') OR LENGTH(:NEW.NKILLUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20099, 'NKILLUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NKILLTER format "Numbers Only"
    IF :NEW.NKILLTER IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NKILLTER, '^[0-9]+$') OR LENGTH(:NEW.NKILLTER) > 38 THEN
            RAISE_APPLICATION_ERROR(-20100, 'NKILLTER must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUND format "Numbers Only"
    IF :NEW.NWOUND IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUND, '^[0-9]+$') OR LENGTH(:NEW.NWOUND) > 38 THEN
            RAISE_APPLICATION_ERROR(-20101, 'NWOUND must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUNDUS format "Numbers Only"
    IF :NEW.NWOUNDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUNDUS, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20102, 'NWOUNDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NWOUNDTE format "Numbers Only"
    IF :NEW.NWOUNDTE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NWOUNDTE, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDTE) > 38 THEN
            RAISE_APPLICATION_ERROR(-20103, 'NKILL must be a numeric value with up to 38 digits.');
        END IF;
    END IF;    
    
    -- Validate PROPERTY format "Numbers Only"
    IF :NEW.PROPERTY IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.PROPERTY, '^[0-9]+$') OR LENGTH(:NEW.PROPERTY) > 38 THEN
            RAISE_APPLICATION_ERROR(-20104, 'PROPERTY must be a numeric value with up to 38 digits.');
        END IF;
    END IF;    
    
    
    -- Validate PROPEXTENT format "Numbers Only"
    IF :NEW.PROPEXTENT IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.PROPEXTENT, '^[0-9]+$') OR LENGTH(:NEW.PROPEXTENT) > 38 THEN
            RAISE_APPLICATION_ERROR(-20105, 'PROPEXTENT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate PROPEXTENT_TXT existence if PROPEXTENT is not empty
    IF :NEW.PROPEXTENT IS NOT NULL AND :NEW.PROPEXTENT_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20106, 'PROPEXTENT_TXT must be provided when PROPEXTENT is not null.');
    END IF;
    
    -- Validate PROPVALUE to accept only "Numbers Only"
    IF :NEW.PROPVALUE IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.PROPVALUE, '^[0-9]+$') OR LENGTH(:NEW.NWOUNDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20107, 'PROPVALUE must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate PROPCOMMENT size
    IF :NEW.PROPCOMMENT IS NOT NULL THEN
        IF LENGTHB(:NEW.PROPCOMMENT) > 256 THEN            
            RAISE_APPLICATION_ERROR(-20108, 'PROPCOMMENT must be a string with a maximum length of 256 bytes.');
        END IF;
    END IF;
    
    -- Validate ISHOSTKID to accept only 0 and 1
    IF :NEW.ISHOSTKID NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20109, 'ISHOSTKID must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate NHOSTKID to accept only "Numbers Only"
    IF :NEW.NHOSTKID IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOSTKID, '^[0-9]+$') OR LENGTH(:NEW.NHOSTKID) > 38 THEN
            RAISE_APPLICATION_ERROR(-20110, 'NHOSTKID must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NHOSTKIDUS to accept only "Numbers Only"
    IF :NEW.NHOSTKIDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOSTKIDUS, '^[0-9]+$') OR LENGTH(:NEW.NHOSTKIDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20111, 'NHOSTKIDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NHOURS to accept only "Numbers Only"
    IF :NEW.NHOURS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NHOURS, '^[0-9]+$') OR LENGTH(:NEW.NHOURS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20112, 'NHOURS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate NDAYS to accept only "Numbers Only"
    IF :NEW.NDAYS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NDAYS, '^[0-9]+$') OR LENGTH(:NEW.NDAYS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20113, 'NDAYS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate DIVERT size
    IF :NEW.DIVERT IS NOT NULL THEN
        IF LENGTHB(:NEW.DIVERT) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20114, 'DIVERT must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate KIDHIJCOUNTRY size
    IF :NEW.KIDHIJCOUNTRY IS NOT NULL THEN
        IF LENGTHB(:NEW.KIDHIJCOUNTRY) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20115, 'KIDHIJCOUNTRY must be a string with a maximum length of 26 bytes.');
        END IF;
    END IF;
    
    -- Validate RANSOM to accept only 0 and 1
    IF :NEW.RANSOM NOT IN (0, 1) THEN
        RAISE_APPLICATION_ERROR(-20116, 'RANSOM must be either 0 or 1 for No and Yes.');
    END IF;
    
    -- Validate RANSOMAMT to accept only "Numbers Only"
    IF :NEW.RANSOMAMT IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMAMT, '^[0-9]+$') OR LENGTH(:NEW.RANSOMAMT) > 38 THEN
            RAISE_APPLICATION_ERROR(-20117, 'RANSOMAMT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    
    -- Validate RANSOMAMTUS to accept only "Numbers Only"
    IF :NEW.RANSOMAMTUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMAMTUS, '^[0-9]+$') OR LENGTH(:NEW.RANSOMAMTUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20118, 'RANSOMAMT must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
        
    -- Validate RANSOMPAID to accept only "Numbers Only"
    IF :NEW.RANSOMPAID IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMPAID, '^[0-9]+$') OR LENGTH(:NEW.RANSOMPAID) > 38 THEN
            RAISE_APPLICATION_ERROR(-20119, 'RANSOMPAID must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate RANSOMPAIDUS to accept only "Numbers Only"
    IF :NEW.RANSOMPAIDUS IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.RANSOMPAIDUS, '^[0-9]+$') OR LENGTH(:NEW.RANSOMPAIDUS) > 38 THEN
            RAISE_APPLICATION_ERROR(-20120, 'RANSOMPAIDUS must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    -- Validate RANSOMNOTE size
    IF :NEW.RANSOMNOTE IS NOT NULL THEN
        IF LENGTHB(:NEW.RANSOMNOTE) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20121, 'RANSOMNOTE must not exceed 26 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate HOSTKIDOUTCOME format "Numbers Only"
    IF :NEW.HOSTKIDOUTCOME IS NOT NULL THEN 
        IF NOT REGEXP_LIKE(:NEW.HOSTKIDOUTCOME, '^[0-9]+$') OR LENGTH(:NEW.HOSTKIDOUTCOME) > 38 THEN
            RAISE_APPLICATION_ERROR(-20122, 'HOSTKIDOUTCOME must be a numeric value with up to 38 digits.');
        END IF;
    END IF;
    
    --Validate HOSTKIDOUTCOME_TXT existence if HOSTKIDOUTCOME is not empty
    IF :NEW.HOSTKIDOUTCOME IS NOT NULL AND :NEW.HOSTKIDOUTCOME_TXT IS NULL THEN
        RAISE_APPLICATION_ERROR(-20123, 'HOSTKIDOUTCOME_TXT must be provided when HOSTKIDOUTCOME is not null.');
    END IF;
    
    -- Validate NRELEASED size
    IF :NEW.NRELEASED IS NOT NULL THEN
        IF NOT REGEXP_LIKE(:NEW.NRELEASED, '^[0-9]+$') OR LENGTH(:NEW.NRELEASED) > 38 THEN
            RAISE_APPLICATION_ERROR(-20124, 'NRELEASED must not exceed 38 Characters.');
        END IF;
    END IF;
    
    -- Validate ADDNOTES size
    IF :NEW.ADDNOTES IS NOT NULL THEN
        IF LENGTHB(:NEW.ADDNOTES) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20125, 'ADDNOTES must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;    
    
    -- Validate SCITE1 size
    IF :NEW.SCITE1 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE1) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20126, 'SCITE1 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;

    -- Validate SCITE2 size
    IF :NEW.SCITE2 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE2) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20127, 'SCITE2 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate SCITE3 size
    IF :NEW.SCITE3 IS NOT NULL THEN
        IF LENGTHB(:NEW.SCITE3) > 1024 THEN            
            RAISE_APPLICATION_ERROR(-20128, 'SCITE3 must not exceed 1024 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate DBSOURCE size
    IF :NEW.DBSOURCE IS NOT NULL THEN
        IF LENGTHB(:NEW.DBSOURCE) > 26 THEN            
            RAISE_APPLICATION_ERROR(-20129, 'DBSOURCE must not exceed 26 BYTE Characters.');
        END IF;
    END IF;
    
    -- Validate INT_LOG to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_LOG, '^[0-9]+$') OR LENGTH(:NEW.INT_LOG) > 38 THEN
        RAISE_APPLICATION_ERROR(-20130, 'INT_LOG must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_IDEO to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_IDEO, '^[0-9]+$') OR LENGTH(:NEW.INT_IDEO) > 38 THEN
        RAISE_APPLICATION_ERROR(-20131, 'INT_IDEO must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_MISC to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_MISC, '^[0-9]+$') OR LENGTH(:NEW.INT_MISC) > 38 THEN
        RAISE_APPLICATION_ERROR(-20132, 'INT_MISC must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate INT_ANY to accept only "Numbers Only"
    IF NOT REGEXP_LIKE(:NEW.INT_ANY, '^[0-9]+$') OR LENGTH(:NEW.INT_ANY) > 38 THEN
        RAISE_APPLICATION_ERROR(-20133, 'INT_ANY must be a numerical characters and must not exceed 38 characters');
    END IF;
    
    -- Validate RELATED size
    IF :NEW.RELATED IS NOT NULL THEN
        IF LENGTHB(:NEW.RELATED) > 128 THEN            
            RAISE_APPLICATION_ERROR(-20134, 'RELATED must not exceed 128 BYTE Characters.');
        END IF;
    END IF;
END;
/
CREATE OR REPLACE TRIGGER after_update_globalterrorism
AFTER UPDATE ON GLOBALTERRORISM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Data Updated Successfully');
END;
/
CREATE OR REPLACE TRIGGER before_delete_globalterrorism
BEFORE DELETE ON GLOBALTERRORISM
FOR EACH ROW
BEGIN
    -- Prevent deletion if the room is of a certain type
    IF :OLD.IYEAR = 1970 THEN
        RAISE_APPLICATION_ERROR(-20135, 'Cannot delete event on 1970.');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER after_delete_globalterrorism
AFTER DELETE ON GLOBALTERRORISM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Data Deleted Successfully');
END;
/
